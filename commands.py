# commands.py

import asyncio
import logging
import datetime
import re  # [–¥–æ–±–∞–≤–ª–µ–Ω–æ] –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ FloodWait –ª–æ–≥–æ–≤

from pyrogram.errors import FloodWait
from bot_config import TARGET_CHAT
from alerts import send_alert, get_message_link
from ignore_manager import add_ignored_user, load_ignored_users,  load_ignored_chats, add_ignored_chat
from keyword_manager import add_extra_keyword
from pyrogram.enums import ChatType

logger = logging.getLogger(__name__)

# [–¥–æ–±–∞–≤–ª–µ–Ω–æ] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Pyrogram –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è "Waiting for N seconds..."
pyrogram_logger = logging.getLogger("pyrogram")
pyrogram_logger.setLevel(logging.WARNING)
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∏—Ç—å –ª–æ–≥–∏ —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –≤—Å–µ —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
# logging.getLogger("pyrogram").setLevel(logging.DEBUG)
# logging.getLogger("pyrogram.client.session.session").setLevel(logging.DEBUG)
# logging.getLogger("pyrogram.client").setLevel(logging.DEBUG)


class PyrogramFloodFilter(logging.Filter):
    def filter(self, record):
        if 'Waiting for' in record.getMessage() and 'before continuing' in record.getMessage():
            match = re.search(r"Waiting for (\d+) seconds", record.getMessage())
            if match:
                seconds = match.group(1)
                logger.warning(f"\U0001F6A7 –ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ {seconds} —Å–µ–∫—É–Ω–¥ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram)")
        return True

pyrogram_logger.addFilter(PyrogramFloodFilter())

class CommandHandler:
    def __init__(self, app, all_keywords, ignored_users=None, ignored_chats=None):
        self.app = app
        self.ALL_KEYWORDS = all_keywords
        self.ignored_users = ignored_users if ignored_users is not None else set()
        self.ignored_chats = ignored_chats if ignored_chats is not None else set()

    def refresh_ignored_users(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞."""
        self.ignored_users = load_ignored_users()

    def refresh_ignored_chats(self):
        self.ignored_chats = load_ignored_chats()

    @staticmethod
    def calc_maxlimit(hours):
        if hours <= 3:
            return hours * 20
        elif hours < 24:
            return 60 + (hours - 3) * 10
        else:
            return 300

    async def send_help(self, message):
        help_text = (
            "\U0001F6E0Ô∏è **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n"
            "/addword \"—Å–ª–æ–≤–æ\" - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n"
            "/ignore \"@username\" - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç\n"
            "/ignorechat \"–∏–º—è —á–∞—Ç–∞\" - –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç\n"
            "/lasttime <—á–∞—Å—ã> - –≤—Ä—É—á–Ω—É—é –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Å—ã\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "/hardscan - –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
            "‚ÄºÔ∏è –ü–∏—à–∏ –∫–æ–º–∞–Ω–¥—ã –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ (–ò–∑–±—Ä–∞–Ω–Ω–æ–µ, –≥—Ä—É–ø–ø—ã, –õ–°)."
        )
        await message.reply(help_text, quote=True)

    async def add_word(self, message):
        try:
            parts = message.text.split(' ', 1)
            if len(parts) < 2 or not parts[1].strip():
                await message.reply("‚ùó –£–∫–∞–∂–∏ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: `/addword —à—Ç–∞–Ω–≥–∞`", quote=True)
                return

            new_word = parts[1].strip().strip('"').strip("'").lower()
            add_extra_keyword(new_word)  # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ñ–∞–π–ª
            self.ALL_KEYWORDS.append(new_word)  # –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫

            await message.reply(f"‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ **{new_word}** –¥–æ–±–∞–≤–ª–µ–Ω–æ!", quote=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}", exc_info=True)
            await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞:\n`{str(e)}`", quote=True)

    async def ignore_user(self, message):
        try:
            parts = message.text.split(' ', 1)
            if len(parts) < 2 or not parts[1].strip():
                await message.reply("‚ùó –£–∫–∞–∂–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: `/ignore @username`", quote=True)
                return

            username = parts[1].strip().lstrip("@").lower()
            add_ignored_user(username)  # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ñ–∞–π–ª
            self.ignored_users.add(username)  # –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫

            await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç.", quote=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–≥–Ω–æ—Ä: {e}", exc_info=True)
            await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–≥–Ω–æ—Ä:\n`{str(e)}`", quote=True)

    async def ignore_chat(self, message):
        try:
            parts = message.text.split(' ', 1)
            if len(parts) < 2 or not parts[1].strip():
                await message.reply("‚ùó –£–∫–∞–∂–∏—Ç–µ –∏–º—è —á–∞—Ç–∞ –∏–ª–∏ ID –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: `/ignorechat @chatname`", quote=True)
                return
            chatname_or_id = parts[1].strip().lstrip("@").lower()
            add_ignored_chat(chatname_or_id)
            self.ignored_chats.add(chatname_or_id)
            await message.reply(f"‚úÖ –ß–∞—Ç `{chatname_or_id}` –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç.", quote=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ –≤ –∏–≥–Ω–æ—Ä: {e}", exc_info=True)
            await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ –≤ –∏–≥–Ω–æ—Ä:\n`{str(e)}`", quote=True)

    async def last_time(self, message):
        """
        –ö–æ–º–∞–Ω–¥–∞: /lasttime <—á–∏—Å–ª–æ_—á–∞—Å–æ–≤>
        –°–∫–∞–Ω–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ <—á–∏—Å–ª–æ_—á–∞—Å–æ–≤> —á–∞—Å–æ–≤.
        """
        MAX_CHATS = 10# None = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        try:
            self.refresh_ignored_users()

            parts = message.text.split(' ', 1)
            if len(parts) < 2 or not parts[1].strip():
                await message.reply("‚ùó –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: `/lasttime 24`", quote=True)
                return

            try:
                hours = int(parts[1].strip())
                if hours <= 0:
                    raise ValueError()
            except ValueError:
                await message.reply(
                    "‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤. –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.\n–ü—Ä–∏–º–µ—Ä: `/lasttime 24`",
                    quote=True)
                return

            await message.reply(f"\U0001F50E –ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤...")
            maxlimit = self.calc_maxlimit(hours)
            time_limit = datetime.datetime.utcnow() - datetime.timedelta(hours=hours)

            count = 0
            async for dialog in self.app.get_dialogs():
                if MAX_CHATS is not None and count >= MAX_CHATS:
                    logger.info(f"üõë –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç {MAX_CHATS} —á–∞—Ç–æ–≤, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.")
                    break

                chat = dialog.chat

                if (str(chat.id) in self.ignored_chats) or (getattr(chat, "username", None) and chat.username.lower() in self.ignored_chats):
                    logger.info(f"[{chat.id}] –ß–∞—Ç –≤ –∏–≥–Ω–æ—Ä–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue

                if chat.type not in {ChatType.GROUP, ChatType.SUPERGROUP, ChatType.CHANNEL}:
                    logger.info(f"[{chat.id}] –ü—Ä–æ–ø—É—â–µ–Ω —á–∞—Ç —Ç–∏–ø–∞ {chat.type}")
                    continue

                if (chat.username and ("@" + chat.username.lower() == TARGET_CHAT.lower())) or (
                    str(chat.id) == TARGET_CHAT):
                    continue

                logger.info(f"[{chat.id}] —Å–∫–∞–Ω–∏—Ä—É–µ–º —á–∞—Ç —Ç–∏–ø–∞ {chat.type}")
                count += 1
                logger.info(f"count —É–≤–µ–ª–∏—á–µ–Ω: {count}")

                found_any = False

                while True:
                    try:
                        found_messages = False
                        entered = False

                        try:
                            member = await self.app.get_chat_member(chat.id, "me")
                            logger.info(f"[{chat.id}] –ú–æ–∏ –ø—Ä–∞–≤–∞: {member.status}")
                        except Exception as e:
                            logger.info(f"[{chat.id}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–æ–∏ –ø—Ä–∞–≤–∞ –≤ —á–∞—Ç–µ: {e}")


                        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å search_messages –≤–º–µ—Å—Ç–æ get_chat_history - –µ—Å–ª–∏ –Ω–µ —Ä–µ—à—É –≤–æ–ø—Ä–æ—Å —Ç–µ –º —á—Ç–æ –Ω–µ —á–∏—Ç–∞—é—Ç—Å—è —á–∞–∞—Ç—ã
                        async for msg in self.app.get_chat_history(chat.id, limit=maxlimit):
                            # –µ—Å–ª–∏ –±—É–¥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –±–∞—Ç—á
                            # messages = await self.app.get_chat_history(chat.id, offset_id=offset_id, limit=batch_size)
                            # –Ω–æ –Ω–∞–¥–æ —Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å —É—á–µ—Ç–æ–º –º–æ–µ–π –¥–∞—Ç—ã –ø–æ —á–∞—Å–∞–º
                            entered = True

                            if not msg.text:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Ç.–ø.)
                                has_media = (
                                    getattr(msg, "photo", None) is not None or
                                    getattr(msg, "video", None) is not None or
                                    getattr(msg, "document", None) is not None or
                                    getattr(msg, "animation", None) is not None or
                                    getattr(msg, "audio", None) is not None or
                                    getattr(msg, "voice", None) is not None or
                                    getattr(msg, "video_note", None) is not None or
                                    getattr(msg, "sticker", None) is not None
                            )

                                if not has_media:
                                    # –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏ –Ω–µ—Ç –º–µ–¥–∏–∞ - –∑–Ω–∞—á–∏—Ç —ç—Ç–æ "–ø—É—Å—Ç–æ–µ" —Å–æ–æ–±—â–µ–Ω–∏–µ, –º–æ–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å —Ü–∏–∫–ª
                                    logger.info(f"[{chat.id}] –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ (get_chat_history –≤–µ—Ä–Ω—É–ª 0 —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –º–µ–¥–∏–∞).")
                                    break

                                continue
                            found_messages = True



                            if msg.date < time_limit:
                                break

                            found_any = True

                            sender = msg.from_user.username if msg.from_user else None
                            if sender and sender.lower() in self.ignored_users:
                                continue

                            text = msg.text.lower()
                            matched_keyword = next((k for k in self.ALL_KEYWORDS if k in text), None)

                            if not matched_keyword:
                                continue

                            chat_title = chat.title if chat.title else f"–õ–∏—á–∫–∞ @{sender}" if sender else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
                            chat_link = f"https://t.me/{chat.username}" if chat.username else f"ChatID: {chat.id}"

                            link = get_message_link(msg)

                            logger.info(
                                f"(–°—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ) –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–æ: \"{matched_keyword}\" | –ê–≤—Ç–æ—Ä: @{sender} | –ß–∞—Ç: \"{chat_title}\" "
                                f"| –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {chat_link} –°—Å—ã–ª–∫–∞ –Ω–∞ sms: {link} ")

                            await send_alert(self.app, msg, matched_keyword,
                                             old_message_note="\U0001F570Ô∏è *–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è!*\n\n", link=link)

                            await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                        if not entered:
                            logger.info(f"[{chat.id}] –ò—Å—Ç–æ—Ä–∏—è –ù–ï –ø–æ–ª—É—á–µ–Ω–∞ ‚Äî Telegram –Ω–µ –æ—Ç–¥–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
                        if not found_messages:
                            logger.info(f"[{chat.id}] –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ (–Ω–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π).")
                        if not found_any:
                            logger.info(f"[{chat.id}] –ò—Å—Ç–æ—Ä–∏—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")

                        break  # –µ—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –∏—Å—Ç–æ—Ä–∏—é, –≤—ã—Ö–æ–¥–∏–º –∏–∑ while
                    except FloodWait as e:  # –ª–æ–≤–∏–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
                        logger.info(f"[FloodWait] –ñ–¥—ë–º {e.value} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                        await asyncio.sleep(e.value)
                    except Exception as e:
                        logger.error(f"‚ùå [{chat.id}] –û—à–∏–±–∫–∞: {type(e).__name__}: {e}", exc_info=True)
                        await asyncio.sleep(5)

            logger.info("–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            await self.app.send_message(TARGET_CHAT, f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            logger.info(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}", exc_info=True)
            await self.app.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:\n`{str(e)}`")
